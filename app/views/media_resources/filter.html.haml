-#old filter panel#
- type = "MediaEntry" # FIXME
- resource_ids = @resources.map(&:id)
- unless resource_ids.empty?
  .filter_box
    %h3.filter_category.filter_header.clearfix
      -# %span.ui-icon.ui-icon-triangle-1-e
      = link_to "Suchergebnisse filtern", "#", :class => "filter_category_link"
    .filter_content{:style => "display: block;"}
      -# %form{:action => request.fullpath.gsub( /\?.*/, "" ), :method => :get, :"data-remote" => "true", :"data-type" => :json, :"data-item_ids" => resource_ids.to_json}
      %form{:action => filter_media_resources_path, :method => :post, :"data-type" => :json, :"data-item_ids" => resource_ids.to_json}
        = hidden_field_tag "filter[type]", type
        = hidden_field_tag "filter[ids]", resource_ids.join(',')
        #filter-query.basic
          %div
            = hidden_field_tag "query", params[:query]
            %h3.filter_category.clearfix
              = link_to "Berechtigungen, Ich bin ...", "#", :class => "filter_category_link"
            .filter_content{:style => "display: none;"}
              %ul
                - @permission_presets.each do |pp| 
                  %li
                    %label
                      = check_box_tag "permission_preset[]", pp.id
                      = "#{pp.name}"

            %h3.filter_category.clearfix
              = link_to "Eigentümer/in", "#", :class => "filter_category_link"
            .filter_content{:style => "display: none;"}
              %ul
                - @owners.each do |owner|
                  %li
                    %label
                      = check_box_tag "owner_id[]", owner.id
                      = owner
            %h3.filter_category.clearfix
              = link_to "Arbeitsgruppen", "#", :class => "filter_category_link"
            .filter_content{:style => "display: none;"}
              %ul
                - @groups.each do |group|
                  %li
                    %label
                      = check_box_tag "group_id[]", group.id
                      = group
            - if type == "MediaEntry"
              %h3.filter_category.clearfix
                = link_to "Medientyp und Format", "#", :class => "filter_category_link"
                %span.ui-icon.ui-icon-triangle-1-e
                =#tmp# link_to "(zurücksetzen)", "#", :class => "reset_filter"
              .filter_content{:style => "display: none;"}
                %h5.filter_subcategory.filter_category.clearfix
                  %span.input_wrapper
                    = check_box_tag "#{type}[media_type][]", "Image"
                    Bild
                  -# = link_to "Details", "#", :class => "filter_category_link"
                  -# %span.ui-icon.ui-icon-triangle-1-e
                .filter_content
                  %ul
                    %li
                      = label_tag "#{type}[orientation][0]", "Querformat"
                      = check_box_tag "#{type}[orientation]", '0'
                    %li
                      = label_tag "#{type}[orientation][1]", "Hochformat"
                      = check_box_tag "#{type}[orientation]", '1'
                  %ul
                    %li
                      = label_tag "#{type}[width][value]", "Breite:"
                      = select_tag "#{type}[width][operator]", options_for_select({'ist genau' => 'is', 'grösser als' => 'gt', 'kleiner als' => 'lt'}, :selected => nil), :include_blank => true
                      = text_field_tag "#{type}[width][value]", nil, :size => 5
                      %span
                        Pixel
                      -# TODO #slider-range
                    %li
                      = label_tag "#{type}[height][value]", "Höhe:"
                      = select_tag "#{type}[height][operator]", options_for_select({'ist genau' => 'is', 'grösser als' => 'gt', 'kleiner als' => 'lt'}, :selected => nil), :include_blank => true
                      = text_field_tag "#{type}[height][value]", nil, :size => 5
                      %span
                        Pixel
  
            = display_meta_data_checkboxes(@resources) # OPTIMIZE this is really slow, consider optimize the performance during the filtering iteration and meta_data normalization
          .filter_footer
            = button_tag nil, :title => "Filtern", :id => 'filter-submit', :name => nil do
              = _("Filter anwenden")
              %span#expected_total_results
                = "(%d)" % resource_ids.count

  :javascript
    $(document).ready(function () {
      $('.filter_box h3.filter_category a.filter_category_link').click(function() {
        var icon = $(this).siblings('span.ui-icon');
        var to_toggle = $(this).parent().next('.filter_content');
  
        to_toggle.toggle();
        if (to_toggle.is(":visible")) {
          icon.removeClass('ui-icon-triangle-1-e').addClass('ui-icon-triangle-1-s');
        } else {
          icon.removeClass('ui-icon-triangle-1-s').addClass('ui-icon-triangle-1-e');
        };
        return false;
      });
  
      var checkboxes = $(".filter_content input[data-item_ids]:checkbox");
      checkboxes.change(function(){
        var parent_form = $(this).closest("form");
        var sibling_checkboxes = parent_form.find("input[data-item_ids]:checkbox");
        var intersected_ids = parent_form.data('item_ids');
        sibling_checkboxes.filter(":checked").each(function(i, elem){
          var a = $(elem).data('item_ids');
          intersected_ids = (i ? intersected_ids.intersect(a) : a );
        });
        sibling_checkboxes.each(function(){
          var that = $(this);
          var a = that.data('item_ids');
          if(intersected_ids) a = intersected_ids.intersect(a);
          that.next(".total_ids").html(a.length);
          if(a.length){
            that.closest("li").removeClass("disabled");
            that.removeAttr("disabled");
          }else{
            that.closest("li").addClass("disabled");
            that.attr("disabled", "disabled");
          }
        });
        var submit_value = intersected_ids ? "("+intersected_ids.length+")" : "";
        parent_form.find(".filter_footer #filter-submit > #expected_total_results").html(submit_value);
        parent_form.data("tmp_intersected_ids", intersected_ids);
      });
  
      var filter_form = $(".filter_content form");
      filter_form.data("tmp_intersected_ids", filter_form.data("item_ids"));

      filter_form.live('submit', function(e){
        e.preventDefault();
        var $this = $(this); 
        $this.find("input#filter_ids").val($this.data("tmp_intersected_ids").join(','));
        App.MediaResources.fetch({
          url: $this.attr('action'),
          type: $this.attr('method'),
          data: $this.serializeObject(),
          success: function(data){ 
            $this.data("paginate_using_filter", true);
            var container = $("#results");
            container.empty();
            display_results(data, container);      
          }
        });
        return false;
      });
      
      $("input#MediaEntry_media_type_").change(function(){
        var _this = $(this);
        var expected_total_results = _this.closest("form").find(".filter_footer #filter-submit > #expected_total_results");
        if(_this.is(":checked")){
          expected_total_results.hide();
        }else{
          expected_total_results.show();
        }
      });

      /* TODO
      $( "#slider-range" ).slider({
        range: true,
        min: 0,
        max: 500,
        values: [ 75, 300 ],
        slide: function( event, ui ) {
        }
      });
      */
  
    });
